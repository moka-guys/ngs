#!/usr/bin/python
import sys, getopt, os
import pandas as pd
import cruzdb
#Need to provide arguments 'up' to include the 5'UTR and 'down' to include the 3'UTR and the associated list of accession numbers of the associated transcripts
#Examples of how to use the script

#Version1 FH panel bed file 
#Set 5'UTR -30, 5'coding exon -30, 3'UTR +20, 3'coding exon +20
#Set Chromosomal coordinate list +-0
#Note that convention states that chromosomal coordinate data set out as chrx:xxx-xxx is 1-based. When copying this data into bed format to create the chromcoordinate file the 5' values are converted to 0 based ie each 5' value is subtracted by 1
#python OOBed3.py --codingup 30  --codingdown 20 --up 30 --down 20 --coordinatefile /home/kevin/Documents/NGS_Pipeline/BedFiles/Chromcoordinates/FHchromcoordinates.txt --coordup 0 --coorddown 0 --outputfile /home/kevin/Documents/NGS_Pipeline/BedFiles/FHver1BedFile.csv --transcripts /home/kevin/Documents/NGS_Pipeline/BedFiles/Transcripts/FHtranscripts.txt
#python OOBed4.py --codingup 0 --codingdown 0 --coordinatefile /home/kevin/Documents/NGS_Pipeline/BedFiles/Chromcoordinates/FHchromcoordinates.txt --outputfile /home/kevin/Documents/NGS_Pipeline/BedFiles/NRXNcodingregionsBedFile.csv --transcripts /home/kevin/Documents/NGS_Pipeline/BedFiles/Transcripts/NRXNtranscripts.txt
#python OOBed4.py --codingup 30 --codingdown 20 --up 30 --coordinatefile /home/kevin/Documents/NGS_Pipeline/BedFiles/Chromcoordinates/FHchromcoordinates.txt --coordup 0 --coorddown 0 --StopFlank 50 --outputfile /home/kevin/Documents/NGS_Pipeline/BedFiles/FHver2BedFile.csv --transcripts /home/kevin/Documents/NGS_Pipeline/BedFiles/Transcripts/FHtranscripts.txt
#python OOBed4.py --codingup 30 --codingdown 20 --up 30 --StopFlank 50 --logfile /home/kevin/Documents/NGS_Pipeline/BedFiles/TP53only_LogFile.txt --outputfile /home/kevin/Documents/NGS_Pipeline/BedFiles/TP53onlyBedFile.csv --transcripts /home/kevin/Documents/NGS_Pipeline/BedFiles/Transcripts/TP53onlyTranscripts.txt


class Bedfile:

	Chr = []
	Start=[]
	Stop=[]
	GeneName=[]
	up = ''	
	upstream = ''
	down = ''
	downstream = ''
	codingup = ''
	codingdown = ''
	transcripts = ''
	transcriptlist = ''
	coordinatefile = ''
	coordinates = ''	
	coordup = ''
	coorddown = ''
	outputfile = ''
	output = ''
	StartFlanking = ''
	StartFlank = ''
	StopFlanking = ''
	StopFlank = ''
	

	
	
		
	def usage(self):

	    usage = """
	    -h --help                 Prints this
	    -m --name of mokafile  	Moka input file to be cross-referenced
	    -s --name of sangerfile	Sanger input file to be checked against
	    -o --name of outputfile	Output file to be generated
	    Sangercheck will cross-reference variants generated by the Moka Pipeline against Mutation Reports generated by the Clinical Scientist from the NextGene software
	    """
	    print usage

	def coordfile(self):
		#Set up bed file using a bed file where the start positions for each exon are base 0
		#Bed files need to contain headers in first row Chr, Start, Stop, GeneName and all rows need to contain the same number of tab delimited spaces
		bed = pd.read_table(self.coordinatefile, header= 0)

		startnumber = int(self.coordup)
		endnumber = int(self.coorddown)
		newstart = bed.Start - startnumber
		self.Start.extend(newstart)
		newstop = bed.Stop + endnumber
		self.Stop.extend(newstop)
		#Append gene names for this list
		self.GeneName.extend(bed.GeneName)
		#Append Chr numbers for this list
		self.Chr.extend(bed.Chr)
		
	def writefile(self):
	#Write columns to a csv bed file
		Chr = pd.Series(self.Chr)		
		Start = pd.Series(self.Start)
		Stop = pd.Series(self.Stop)
		GeneName = pd.Series(self.GeneName)
		
		

		bedfile = pd.DataFrame(zip(Start, Stop, GeneName),  columns = ["Start", "Stop", "GeneName"], index=[Chr])

		#Check if all values in Start column are less than the corresponding values in the Stop column
		counter=0
		for row in Start:
			
			if Start[counter] > Stop[counter]:
				print "Error on line ", counter," Not all Start values are less than corresponding Stop values"
				
			counter += 1
		bedfile.index.name = "Chr"


		bedfile.to_csv(path_or_buf=self.outputfile, sep='\t')




	def flankingregion(self):
		
		bed = pd.read_table(self.transcripts, header= 0)
		
		g = cruzdb.Genome(db="hg19")
		refGene = g.refGene
		for index, gene in bed[0:].itertuples():
			
			geneposition = refGene.filter_by(name=gene).one()
			
			if self.up == True and self.down == True and self.coding == True and geneposition.strand == "+":
						
				positionsexons=geneposition.exons			
				#Generate the Chr column			
				for row in positionsexons:
						
					self.Chr.append(geneposition.chrom)
				
				#Generate GeneName column				
				for row in positionsexons:
					self.GeneName.append(geneposition.name)


				#Generate the Start and Stop columns
				counter = 0			
				for a, b in positionsexons:
					if counter == 0:
						upstream = long(self.upstream)				
						upstreamUTR = a - upstream				
						
						self.Start.append(upstreamUTR)
						down = long(self.codingdown)
						exons3 = b + down
						
						self.Stop.append(exons3)
						counter += 1
					elif counter > 0 and counter != (len(positionsexons) - 1):
						up = long(self.codingup)
						exons5 = a - up
						self.Start.append(exons5)
						down = long(self.codingdown)
						exons3 = b + down
						self.Stop.append(exons3)
						counter += 1
					
					else:
						up = long(self.codingup)
						exons5 = a - up
						self.Start.append(exons5)
						downstream = long(self.downstream)				
						downstreamUTR = b + downstream				
						self.Stop.append(downstreamUTR)					
					
				
			#For genes on the minus strand
			elif self.up == True and self.down == True and self.coding == True and geneposition.strand == "-":

				positionsexons=geneposition.exons			
				#Generate the Chr column			
				for row in positionsexons:
					
					self.Chr.append(geneposition.chrom)
								
				#Generate GeneName column				
				for row in positionsexons:
					self.GeneName.append(geneposition.name)				


				#Generate the Start and Stop columns
				counter = 0			
				for a, b in positionsexons:
					if counter == 0:
						downstream = long(self.downstream)				
						downstreamUTR = a - downstream
						self.Start.append(downstreamUTR)
						up = long(self.codingup)
						exons5 = b + up
						self.Stop.append(exons5)
						counter += 1
					elif counter > 0 and counter != (len(positionsexons) - 1):
						down = long(self.codingdown)
						exons3 = a - down
						self.Start.append(exons3)
						up = long(self.codingup)
						exons5 = b + up
						self.Stop.append(exons5)
						counter += 1
			
					else:
						down = long(self.codingdown)
						exons3 = a - down
						self.Start.append(exons3)
						upstream = long(self.upstream)				
						upstreamUTR = b + upstream
						self.Stop.append(upstreamUTR)


			elif self.up == True and self.down == False and self.coding == True and geneposition.strand == "+":
			
				positionsexons=geneposition.exons			
								
				counter = 0
				for a, b in positionsexons:
					geneposition = refGene.filter_by(name=gene).one()
					positionscds=geneposition.cds
					print "cds begins"
					
					if counter == 0:
						upstream = long(self.upstream)				
						upstreamUTR = a - upstream
						self.Start.append(upstreamUTR)
						down = long(self.codingdown)
						exons3 = b + down
						self.Stop.append(exons3)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						
						counter += 1
					elif counter > 0 and b < positionscds[-1][1]:
						up = long(self.codingup)
						exons5 = a - up
						self.Start.append(exons5)
						down = long(self.codingdown)
						exons3 = b + down
						self.Stop.append(exons3)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						counter += 1
				
					else:
						up = long(self.codingup)
						exons5 = positionscds[-1][0] - up
						self.Start.append(exons5)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						#Define flanking region round Stop codon
						if self.StopFlanking == True:
							StopFlank = long(self.StopFlank)
							exons3 = positionscds[-1][1] + StopFlank
							self.Stop.append(exons3)
						else:
							down = long(self.codingdown)
							exons3 = positionscds[-1][1] + down
							self.Stop.append(exons3)
						break

			elif self.up == True and self.down == False and self.coding == True and geneposition.strand == "-":
				print "correct channel1"
				positionsexons=geneposition.exons			
				

				#Generate the Start and Stop columns
				counter = 0
				for a, b in positionsexons:
					geneposition = refGene.filter_by(name=gene).one()
					positionscds=geneposition.cds
					if a < positionscds[0][0]:
						exons3 = []					
						if not exons3:			
							if self.StopFlanking == True:
								StopFlank = long(self.StopFlank)
								exons3 = positionscds[0][0] - StopFlank
								self.Start.append(exons3)
							else:
								down = long(self.codingdown)
								exons3 = positionscds[0][0] - down
								self.Start.append(exons3)
							up = long(self.codingup)				
							exons5 = positionscds[0][1] + up
							self.Stop.append(exons5)
							self.Chr.append(geneposition.chrom)
							self.GeneName.append(geneposition.name)
							counter += 1
						else:
							counter += 1
					elif a > positionscds[0][0] and counter != (len(positionsexons) - 1):
						down = long(self.codingdown)
						exons3 = a - down
						self.Start.append(exons3)
						up = long(self.codingup)
						exons5 = b + up
						self.Stop.append(exons5)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						counter += 1
				
					else:
						down = long(self.codingdown)
						exons3 = a - down
						self.Start.append(exons3)
						upstream = long(self.upstream)				
						upstreamUTR = b + upstream
						self.Stop.append(upstreamUTR)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)

			
			elif self.up == False and self.down == True and self.coding == True and geneposition.strand == "+":
				print "correct channel2"
				positionsexons=geneposition.exons			
				

				#Generate the Start and Stop columns
				counter = 0
				for a, b in positionsexons:
					geneposition = refGene.filter_by(name=gene).one()
					positionscds=geneposition.cds
					if a < positionscds[0][0]:
						exons3 = []					
						if not exons3:
							if self.StartFlanking == True:
								StartFlank = long(self.StartFlank)
								exons5 = positionscds[0][0] - StartFlank
								self.Start.append(exons5)			
							else:
								up = long(self.codingup)
								exons5 = positionscds[0][0] - up
								self.Start.append(exons5)
							down = long(self.codingdown)				
							exons3 = positionscds[0][1] + down
							self.Stop.append(exons3)
							self.Chr.append(geneposition.chrom)
							self.GeneName.append(geneposition.name)
							counter += 1
						else:
							counter += 1
					elif a > positionscds[0][0] and counter != (len(positionsexons) - 1):
						up = long(self.codingup)
						exons5 = a - up
						self.Start.append(exons5)
						down = long(self.codingdown)
						exons3 = b + down
						self.Stop.append(exons3)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						counter += 1
				
					else:
						up = long(self.codingup)
						exons5 = a - up
						self.Start.append(exons5)
						downstream = long(self.downstream)				
						downstreamUTR = b + downstream
						self.Stop.append(downstreamUTR)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)					

			elif self.up == False and self.down == True and self.coding == True and geneposition.strand == "-":
			
				positionsexons=geneposition.exons			
				


				#Generate the Start and Stop columns
				counter = 0
				for a, b in positionsexons:
					geneposition = refGene.filter_by(name=gene).one()
					positionscds=geneposition.cds
					print "cds begins"
					
					if counter == 0:
						downstream = long(self.downstream)				
						downstreamUTR = a - downstream
						self.Start.append(downstreamUTR)
						up = long(self.codingup)
						exons5 = b + up
						self.Stop.append(exons5)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						counter += 1
						
					elif counter > 0 and a > positionscds[0][0]:
						down = long(self.codingdown)
						exons3 = a - down
						self.Start.append(exons3)
						up = long(self.codingup)
						exons5 = b + up
						self.Stop.append(exons5)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						counter += 1
				
					else:
						down = long(self.codingdown)
						exons3 = positionscds[0][0] - down
						self.Start.append(exons3)
						self.Chr.append(geneposition.chrom)
						self.GeneName.append(geneposition.name)
						if self.StartFlanking == True:
								StartFlank = long(self.StartFlank)
								exons5 = positionscds[0][1] + StartFlank
								self.Stop.append(exons5)
						else:
							up = long(self.codingup)
							exons5 = positionscds[0][1] + up
							self.Stop.append(exons5)
						break


			elif self.up == False and self.down == False and self.coding == True and geneposition.strand == "+":
				positions= geneposition.cds
				#Generate the Chr column			
				for row in positions:
					
					self.Chr.append(geneposition.chrom)
				
			
				#Generate GeneName column				
				for row in positions:
					self.GeneName.append(geneposition.name)


				#Generate the Start and Stop columns
				itemlist = []
				for a, b in positions:
					itemlist.append(a)
					if len(itemlist) == 1:
						if self.StartFlanking == True:
							StartFlank = long(self.StartFlank)
							exons5 = a - StartFlank
							self.Start.append(exons5)
							down = long(self.codingdown)
							exons3 = b + down
							self.Stop.append(exons3)	
						else:	
							up = long(self.codingup)				
							exons5 = a - up
							self.Start.append(exons5)
							down = long(self.codingdown)
							exons3 = b + down
							self.Stop.append(exons3)
					elif len(itemlist) == (len(positions) -1):
						up = long(self.codingup)				
						exons5 = a - up
						self.Start.append(exons5)
						down = long(self.codingdown)
						exons3 = b + down
						self.Stop.append(exons3)
					else:
						if self.StopFlanking == True:
							up = long(self.codingup)				
							exons5 = a - up
							self.Start.append(exons5)
							StopFlank = long(self.StopFlank)
							exons3 = b + StopFlank
							self.Stop.append(exons3)
						else:
							up = long(self.codingup)				
							exons5 = a - up
							self.Start.append(exons5)
							down = long(self.codingdown)
							exons3 = b + down
							self.Stop.append(exons3)

			elif self.up == False and self.down == False and self.coding == True and geneposition.strand == "-":
				positions= geneposition.cds
				#Generate the Chr column			
				for row in positions:	
					self.Chr.append(geneposition.chrom)
			
				#Generate GeneName column				
				for row in positions:
					self.GeneName.append(geneposition.name)


				#Generate the Start and Stop columns
				itemlist = []
				for a, b in positions:
					itemlist.append(a)
					if len(itemlist) == 1:
						if self.StopFlanking == True:
							StopFlank = long(self.StopFlank)
							exons3 = a - StopFlank
							self.Start.append(exons3)
							up = long(self.codingdown)		
							exons5 = b + up
							self.Stop.append(exons5)
						else:
							down = long(self.codingdown)				
							exons3 = a - down
							self.Start.append(exons3)
							up = long(self.codingdown)		
							exons5 = b + up
							self.Stop.append(exons5)
							
					elif len(itemlist) == (len(positions) -1):
						down = long(self.codingdown)				
						exons3 = a - down
						self.Start.append(exons3)
						up = long(self.codingdown)		
						exons5 = b + up
						self.Stop.append(exons5)
						
					else:
						if self.StartFlanking == True:
							down = long(self.codingdown)				
							exons3 = a - down
							self.Start.append(exons3)
							StartFlank = long(self.StartFlank)
							exons5 = b + StartFlank
							self.Start.append(exons5)
						else:
							down = long(self.codingdown)				
							exons3 = a - down
							self.Start.append(exons3)
							up = long(self.codingdown)		
							exons5 = b + up
							self.Stop.append(exons5)
						

			else:
				print "You need to provide --coding arguments"

					
			
			
#python Cruzdb.py --coding 10 --transcripts NM_000546 NM_004360 NM_000059 NM_000314 NM_007294 NM_000455
def UTR(argv):
	bedfile = Bedfile()
	log = ''	
#Generates and interprets a list of options which can be passed as arguments to the function UTR
	try:
      		opts, args = getopt.getopt(sys.argv[1:], "h", ["coordinatefile=", "coordup=", "coorddown=", "up=", "down=", "codingup=", "codingdown=", "StartFlank=", "StopFlank=", "logfile=", "outputfile=", "transcripts="])
	except getopt.GetoptError, err:
		print str(err)
		bedfile.usage()
		sys.exit(2)
	output = None
	verbose = False
	
	
	print opts
	for o, a in opts:

		if o in ("-h", "--help"):
			bedfile.usage()
			sys.exit()
		elif o == "--coordinatefile":
			if a in ("-h", "--help", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --coordinatefile"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.coordinatefile = a

		elif o == "--coordup":
			if a in ("-h", "--help", "--coordinatefile", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --coordup"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.coordup = a
				bedfile.coordinates = True

		elif o == "--coorddown":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --coordup"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.coorddown = a


		elif o == "--up":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--down", "--codingup", "--codingdown", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --up"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.upstream = a
				bedfile.up = True

		elif o == "--down":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--codingup", "--codingdown", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --down"
				bedfile.usage()
				sys.exit()
			else:			
				bedfile.downstream = a
				bedfile.down = True
		elif o == "--codingup":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingdown", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --codingup"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.codingup = a		
				bedfile.coding = True
				
		elif o == "--codingdown":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--StartFlank", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --codingdown"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.codingdown = a		
				bedfile.coding = True
				
		elif o == "--StartFlank":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StopFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --StartFlank"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.StartFlank = a		
				bedfile.StartFlanking = True
				
		elif o == "--StopFlank":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--logfile", "--transcripts", "--outputfile"):
				print "need to define --StartFlank"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.StopFlank = a		
				bedfile.StopFlanking = True
		
		elif o == "--logfile":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--StopFlank", "--transcripts", "--outputfile"):
				print "need to define --logfile"
				bedfile.usage()
				sys.exit()
			else:
				logfile = a
				log = True		
			
				
		elif o == "--outputfile":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--logfile", "--StopFlank", "--transcripts"):
				print "need to define --outputfile"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.outputfile = a
				bedfile.output = True			


		elif o == "--transcripts":
			if a in ("-h", "--help", "--coordinatefile", "--coordup", "--coorddown", "--up", "--down", "--codingup", "--codingdown", "--StartFlank", "--logfile", "--StopFlank", "--outputfile"):
				print "need to define --transcripts"
				bedfile.usage()
				sys.exit()
			else:
				bedfile.transcripts = a
				bedfile.transcriptlist = True

		else:
			assert False, "unhandled option"
	if log == True:		
		log = open(logfile, 'w+')
		log.write("Command arguments executed:\n")
		for item in sys.argv:
			str(item)
			log.write("%s " % item)
		log.write("\n\n Python version: %s" % sys.version)
		log.write("\n\n getopt module file path: %s" % getopt.__file__)
		log.write("\n\n os module file path: %s" % os.__file__)
		log.write("\n\n pd class file path: %s" % pd.__file__)
		log.write("\n\n cruzdb module file path: %s" % cruzdb.__file__)
		#from cruzdb import Genome
	else:
		print "WARNING you need to define --logfile"
		bedfile.usage()
		sys.exit()
#Ensure I assign False values to variables up and down if they have not been assigned True in the previous for loop
	if bedfile.down != True:
		bedfile.down = False
	if bedfile.up != True:
		bedfile.up = False
	if bedfile.coding != True:
		bedfile.coding = False
	
#Initiate flankingregion method from class Bedfile
	if bedfile.transcriptlist == True:
		bedfile.flankingregion()
	if bedfile.coordinates == True:
		bedfile.coordfile()
	if bedfile.output == True:
		bedfile.writefile()
	else:
		print "You have not supplied a file name to write to using argument --outputfile"



UTR(sys.argv[1:])

